@startuml

hide empty members

'USER

package web {
  +class WebUtils <<common>> {
    +getLanguageHeader()
    +getAuthenticatedUser()
    +{static}buildAccessTokenResponseCookie()
  }

  class AuthorizationController <<user>> {
    initiateAuthorization()
    verifyAuthorization()
  }
}

package primary-port {
  interface AuthorizationApi <<user>> {
    getRequestToken()
    getAuthenticatedUser()
  }

  +interface UserApi <<user>> {
    +findAuthenticatedUser()
  }
}

package core {
  class AuthorizationService <<user>>
  class UserService <<user>>
}

package secondary-port {
  interface OAuthService <<user>> {
    getRequestToken()
    getAccessToken()
  }

  interface WikipediaUserRepository <<user>> {
    findAuthenticatedUser()
  }
}

package secondary-adapter {
  package wikipedia {
    class OAuthMediaWikiService <<user>>
    class WikipediaUserApiRepository <<user>>
    class WikipediaUserCacheRepository <<user>>
  }
}

AuthorizationController --> AuthorizationApi
AuthorizationApi <|-- AuthorizationService
WebUtils --> UserApi
UserApi <-- AuthorizationService
AuthorizationService --> OAuthService
UserApi <|-- UserService
UserService --> WikipediaUserRepository
OAuthService <|-- OAuthMediaWikiService
WikipediaUserRepository <|-- WikipediaUserCacheRepository
WikipediaUserCacheRepository <-- WikipediaUserApiRepository

'PAGE COUNT

package web {
  class PageCountController <<page.count>> {
    countNotReviewedGroupedByType()
  }
}

package primary-port {
  interface PageCountApi <<page.count>> {
    countNotReviewedGroupedByType()
  }
}

package core {
  class PageCountService <<page.count>>
}

package secondary-port {
  +interface PageCountRepository <<page.count>> {
    countNotReviewedGroupedByType()
    +countNotReviewedByType()
  }
}

package secondary-adapter {
  package repository {
    class PageCountCacheRepository <<page.count>>
    class PageCountJdbcRepository <<page.count>>
  }
}

PageCountController --> PageCountApi
PageCountApi <|-- PageCountService
PageCountService --> PageCountRepository
PageCountRepository <|-- PageCountCacheRepository
PageCountCacheRepository <-- PageCountJdbcRepository

'PAGE LIST

package web {
  class PageListController <<page.list>> {
    findPageTitlesNotReviewedByType()
    reviewPagesByType()
  }
}

package primary-port {
  interface PageListApi <<page.list>> {
    findPageTitlesNotReviewedByType()
    updateSystemReviewerByType()
  }
}

package core {
  class PageListService <<page.list>>
}

PageListController --> PageListApi
PageListApi <|-- PageListService

'PAGE FIND - TODO
'TODO PageCountRepository es usado por ReviewTypeFinder y ReviewNoTypeFinder

package secondary-port {
  +interface PageRepository <<page.find>> {
    +findByKey()
    +findByIdRange()
    findNotReviewedByType()
    +findTitlesNotReviewedByType()
    'TODO También usan: ReviewXxxFinder y PageBatch/IndexService
  }
}

PageListService --> PageRepository

'REPLACEMENT COUNT

package web {
  class ReplacementCountController <<repl.count>> {
    countReplacements()
    countReviewedReplacementsGroupedByReviewer()
    countNotReviewedReplacementsGroupedByPage()
  }
}

package primary-port {
  interface ReplacementCountApi <<repl.count>> {
    countReviewed()
    countNotReviewed()
    countReviewedGroupedByReviewer()
    countNotReviewedGroupedByPage()
  }
}

package core {
  class ReplacementCountService <<repl.count>>
}

package secondary-port {
  interface ReplacementCountRepository <<repl.count>> {
    countReviewed()
    countNotReviewed()
    countReviewedGroupedByReviewer()
    countNotReviewedGroupedByPage()
  }
}

package secondary-adapter {
  package repository {
    class ReplacementCountCacheRepository <<repl.count>>
    class ReplacementCountJdbcRepository <<repl.count>>
  }
}

ReplacementCountController --> ReplacementCountApi
ReplacementCountApi <|-- ReplacementCountService
ReplacementCountService --> ReplacementCountRepository
ReplacementCountRepository <|-- ReplacementCountCacheRepository
ReplacementCountCacheRepository <-- ReplacementCountJdbcRepository

'REPLACEMENT SAVE - TODO

package secondary-port {
  +interface ReplacementSaveRepository {
    +add()
    +update()
    +remove()
    +updateReviewerByType()
    +updateReviewer()
    +removeByType()
    'TODO También lo usan ReviewTypeFinder, ReplacementTypeSaveService, PageSaveJdbcRepository
    'TODO y  ReplacementSaveXxxRepository
  }
}

PageListService --> ReplacementSaveRepository

@enduml
